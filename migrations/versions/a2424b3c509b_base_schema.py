"""base schema

Revision ID: a2424b3c509b
Revises: 
Create Date: 2025-09-15 18:40:06.896304

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a2424b3c509b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('type', sa.Enum('ASSET', 'LIABILITY', 'EQUITY', 'REVENUE', 'EXPENSE', name='account_type', native_enum=False), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_accounts_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_accounts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_accounts_updated_at'), ['updated_at'], unique=False)

    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('whatsapp', sa.String(length=20), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('address', sa.String(length=200), nullable=True),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('category', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_online', sa.Boolean(), nullable=True),
    sa.Column('credit_limit', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('discount_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('credit_limit >= 0', name='ck_customer_credit_limit_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.create_index('ix_customers_active_online', ['is_active', 'is_online'], unique=False)
        batch_op.create_index(batch_op.f('ix_customers_created_at'), ['created_at'], unique=False)
        batch_op.create_index('ix_customers_name', ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_customers_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index('ix_customers_whatsapp', ['whatsapp'], unique=False)

    op.create_table('employees',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('position', sa.String(length=100), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('bank_name', sa.String(length=100), nullable=True),
    sa.Column('account_number', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('employees', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_employees_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_employees_email'), ['email'], unique=True)
        batch_op.create_index('ix_employees_name', ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_employees_updated_at'), ['updated_at'], unique=False)

    op.create_table('equipment_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('model_number', sa.String(length=100), nullable=True),
    sa.Column('chassis_number', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('equipment_types', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_equipment_types_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_equipment_types_updated_at'), ['updated_at'], unique=False)

    op.create_table('expense_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('expense_types', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_expense_types_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_expense_types_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_expense_types_updated_at'), ['updated_at'], unique=False)

    op.create_table('gl_batches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=True),
    sa.Column('source_type', sa.String(length=30), nullable=True),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('purpose', sa.String(length=30), nullable=True),
    sa.Column('memo', sa.String(length=255), nullable=True),
    sa.Column('posted_at', sa.DateTime(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('entity_type', sa.String(length=30), nullable=True),
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'POSTED', 'VOID', name='gl_batch_status', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_type', 'source_id', 'purpose', name='uq_gl_source_purpose')
    )
    with op.batch_alter_table('gl_batches', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_gl_batches_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_gl_batches_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_entity_type'), ['entity_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_posted_at'), ['posted_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_purpose'), ['purpose'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_source_id'), ['source_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_source_type'), ['source_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_batches_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index('ix_gl_entity', ['entity_type', 'entity_id'], unique=False)

    op.create_table('partners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('contact_info', sa.String(length=200), nullable=True),
    sa.Column('identity_number', sa.String(length=100), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('address', sa.String(length=200), nullable=True),
    sa.Column('balance', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('share_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('balance >= 0', name='ck_partner_balance_non_negative'),
    sa.CheckConstraint('share_percentage >= 0 AND share_percentage <= 100', name='ck_partner_share_percentage_range'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identity_number'),
    sa.UniqueConstraint('phone_number')
    )
    with op.batch_alter_table('partners', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partners_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_partners_email'), ['email'], unique=True)
        batch_op.create_index('ix_partners_name', ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_partners_updated_at'), ['updated_at'], unique=False)

    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('code', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('name_ar', sa.String(length=120), nullable=True),
    sa.Column('module', sa.String(length=50), nullable=True),
    sa.Column('is_protected', sa.Boolean(), server_default=sa.text('0'), nullable=False),
    sa.Column('aliases', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_permissions_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_permissions_module'), ['module'], unique=False)
        batch_op.create_index('ix_permissions_module_code', ['module', 'code'], unique=False)
        batch_op.create_index(batch_op.f('ix_permissions_name'), ['name'], unique=True)

    op.create_table('product_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['product_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('product_categories', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_product_categories_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_categories_updated_at'), ['updated_at'], unique=False)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index('ix_roles_default_name', ['is_default', 'name'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('suppliers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('is_local', sa.Boolean(), nullable=True),
    sa.Column('identity_number', sa.String(length=100), nullable=True),
    sa.Column('contact', sa.String(length=200), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('address', sa.String(length=200), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('balance', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('payment_terms', sa.String(length=50), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('balance >= 0', name='ck_supplier_balance_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identity_number')
    )
    with op.batch_alter_table('suppliers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_suppliers_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_suppliers_email'), ['email'], unique=True)
        batch_op.create_index('ix_suppliers_name', ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_suppliers_phone'), ['phone'], unique=False)
        batch_op.create_index(batch_op.f('ix_suppliers_updated_at'), ['updated_at'], unique=False)

    op.create_table('utility_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('utility_type', sa.String(length=20), nullable=False),
    sa.Column('provider', sa.String(length=120), nullable=False),
    sa.Column('account_no', sa.String(length=100), nullable=True),
    sa.Column('meter_no', sa.String(length=100), nullable=True),
    sa.Column('alias', sa.String(length=120), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("utility_type IN ('ELECTRICITY','WATER')", name='ck_utility_type_allowed'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('utility_accounts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_utility_accounts_account_no'), ['account_no'], unique=False)
        batch_op.create_index(batch_op.f('ix_utility_accounts_alias'), ['alias'], unique=False)
        batch_op.create_index(batch_op.f('ix_utility_accounts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_utility_accounts_meter_no'), ['meter_no'], unique=False)
        batch_op.create_index(batch_op.f('ix_utility_accounts_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_utility_accounts_utility_type'), ['utility_type'], unique=False)

    op.create_table('gl_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('account', sa.String(length=20), nullable=False),
    sa.Column('debit', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('credit', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('ref', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('(debit = 0 OR credit = 0)', name='ck_gl_entry_one_side'),
    sa.CheckConstraint('(debit > 0 OR credit > 0)', name='ck_gl_entry_nonzero'),
    sa.CheckConstraint('credit >= 0', name='ck_gl_credit_ge_0'),
    sa.CheckConstraint('debit >= 0', name='ck_gl_debit_ge_0'),
    sa.ForeignKeyConstraint(['account'], ['accounts.code'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['batch_id'], ['gl_batches.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('gl_entries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_gl_entries_account'), ['account'], unique=False)
        batch_op.create_index('ix_gl_entries_account_currency', ['account', 'currency'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_entries_batch_id'), ['batch_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_entries_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_gl_entries_updated_at'), ['updated_at'], unique=False)

    op.create_table('online_carts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cart_id', sa.String(length=50), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'ABANDONED', 'CONVERTED', name='cart_status', native_enum=False), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('online_carts', schema=None) as batch_op:
        batch_op.create_index('ix_online_cart_customer_status', ['customer_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_carts_cart_id'), ['cart_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_online_carts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_carts_customer_id'), ['customer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_carts_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_carts_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_carts_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_carts_updated_at'), ['updated_at'], unique=False)

    op.create_table('partner_settlements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=40), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=False),
    sa.Column('from_date', sa.DateTime(), nullable=False),
    sa.Column('to_date', sa.DateTime(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'CONFIRMED', 'CANCELLED', name='partner_settlement_status', native_enum=False), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('total_gross', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_share', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_costs', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_due', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('total_costs >= 0', name='ck_partner_settlement_costs_non_negative'),
    sa.CheckConstraint('total_due >= 0', name='ck_partner_settlement_due_non_negative'),
    sa.CheckConstraint('total_gross >= 0', name='ck_partner_settlement_gross_non_negative'),
    sa.CheckConstraint('total_share >= 0', name='ck_partner_settlement_share_non_negative'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('partner_settlements', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_settlements_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_partner_settlements_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_settlements_partner_id'), ['partner_id'], unique=False)
        batch_op.create_index('ix_partner_settlements_partner_period', ['partner_id', 'from_date', 'to_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_settlements_updated_at'), ['updated_at'], unique=False)

    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sku', sa.String(length=50), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('part_number', sa.String(length=100), nullable=True),
    sa.Column('brand', sa.String(length=100), nullable=True),
    sa.Column('commercial_name', sa.String(length=100), nullable=True),
    sa.Column('chassis_number', sa.String(length=100), nullable=True),
    sa.Column('serial_no', sa.String(length=100), nullable=True),
    sa.Column('barcode', sa.String(length=100), nullable=True),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('category_name', sa.String(length=100), nullable=True),
    sa.Column('purchase_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('selling_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('cost_before_shipping', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('cost_after_shipping', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('unit_price_before_tax', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('min_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('max_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('min_qty', sa.Integer(), nullable=False),
    sa.Column('reorder_point', sa.Integer(), nullable=True),
    sa.Column('image', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('condition', sa.Enum('NEW', 'USED', 'REFURBISHED', name='product_condition', native_enum=False), nullable=False),
    sa.Column('origin_country', sa.String(length=50), nullable=True),
    sa.Column('warranty_period', sa.Integer(), nullable=True),
    sa.Column('weight', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('dimensions', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_digital', sa.Boolean(), nullable=False),
    sa.Column('is_exchange', sa.Boolean(), nullable=False),
    sa.Column('is_published', sa.Boolean(), nullable=False),
    sa.Column('vehicle_type_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('supplier_international_id', sa.Integer(), nullable=True),
    sa.Column('supplier_local_id', sa.Integer(), nullable=True),
    sa.Column('online_name', sa.String(length=255), nullable=True),
    sa.Column('online_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('online_image', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('cost_after_shipping >= 0', name='ck_product_cost_after_ge_0'),
    sa.CheckConstraint('cost_before_shipping >= 0', name='ck_product_cost_before_ge_0'),
    sa.CheckConstraint('max_price IS NULL OR max_price >= 0', name='ck_product_max_price_ge_0'),
    sa.CheckConstraint('min_price IS NULL OR min_price >= 0', name='ck_product_min_price_ge_0'),
    sa.CheckConstraint('min_qty >= 0', name='ck_product_min_qty_ge_0'),
    sa.CheckConstraint('online_price IS NULL OR online_price >= 0', name='ck_product_online_price_ge_0'),
    sa.CheckConstraint('price >= 0', name='ck_product_price_ge_0'),
    sa.CheckConstraint('purchase_price >= 0', name='ck_product_purchase_ge_0'),
    sa.CheckConstraint('reorder_point IS NULL OR reorder_point >= 0', name='ck_product_reorder_ge_0'),
    sa.CheckConstraint('selling_price >= 0', name='ck_product_selling_ge_0'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='ck_product_tax_rate_0_100'),
    sa.CheckConstraint('unit_price_before_tax >= 0', name='ck_product_unit_before_tax_ge_0'),
    sa.CheckConstraint('weight IS NULL OR weight >= 0', name='ck_product_weight_ge_0'),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['supplier_international_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['supplier_local_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['vehicle_type_id'], ['equipment_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_products_brand'), ['brand'], unique=False)
        batch_op.create_index('ix_products_brand_part', ['brand', 'part_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_part_number'), ['part_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index('uq_products_barcode', ['barcode'], unique=True, postgresql_where=sa.text('barcode IS NOT NULL'))

    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('supplier_settlements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=40), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=False),
    sa.Column('from_date', sa.DateTime(), nullable=False),
    sa.Column('to_date', sa.DateTime(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'CONFIRMED', 'CANCELLED', name='supplier_settlement_status', native_enum=False), nullable=False),
    sa.Column('mode', sa.Enum('ON_RECEIPT', 'ON_CONSUME', name='supplier_settlement_mode', native_enum=False), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('total_gross', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_due', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('total_due >= 0', name='ck_supplier_settlement_due_non_negative'),
    sa.CheckConstraint('total_gross >= 0', name='ck_supplier_settlement_gross_non_negative'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('supplier_settlements', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_supplier_settlements_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_supplier_settlements_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlements_mode'), ['mode'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlements_supplier_id'), ['supplier_id'], unique=False)
        batch_op.create_index('ix_supplier_settlements_supplier_period', ['supplier_id', 'from_date', 'to_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlements_updated_at'), ['updated_at'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('1'), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('last_seen', sa.DateTime(), nullable=True),
    sa.Column('last_login_ip', sa.String(length=64), nullable=True),
    sa.Column('login_count', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index('ix_users_role_active', ['role_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_role_id'), ['role_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('warehouses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('warehouse_type', sa.Enum('MAIN', 'PARTNER', 'INVENTORY', 'EXCHANGE', 'ONLINE', name='warehouse_type', native_enum=False), nullable=False),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('share_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('current_occupancy', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('online_slug', sa.String(length=150), nullable=True),
    sa.Column('online_is_default', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('capacity IS NULL OR capacity >= 0', name='ck_warehouses_capacity_nonneg'),
    sa.CheckConstraint('capacity IS NULL OR current_occupancy <= capacity', name='ck_warehouses_occupancy_le_capacity'),
    sa.CheckConstraint('current_occupancy >= 0', name='ck_warehouses_occupancy_nonneg'),
    sa.CheckConstraint('share_percent >= 0 AND share_percent <= 100', name='ck_warehouses_share_percent'),
    sa.ForeignKeyConstraint(['parent_id'], ['warehouses.id'], ),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('online_slug', name='uq_warehouses_online_slug')
    )
    with op.batch_alter_table('warehouses', schema=None) as batch_op:
        batch_op.create_index('ix_warehouses_active_type', ['is_active', 'warehouse_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_warehouses_created_at'), ['created_at'], unique=False)
        batch_op.create_index('ix_warehouses_name', ['name'], unique=False)
        batch_op.create_index('ix_warehouses_online_default', ['online_is_default'], unique=False)
        batch_op.create_index(batch_op.f('ix_warehouses_updated_at'), ['updated_at'], unique=False)

    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=20), nullable=False),
    sa.Column('old_data', sa.Text(), nullable=True),
    sa.Column('new_data', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_audit_logs_action'), ['action'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_customer_id'), ['customer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_model_name'), ['model_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_record_id'), ['record_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_audit_logs_user_id'), ['user_id'], unique=False)
        batch_op.create_index('ix_audit_model_record', ['model_name', 'record_id'], unique=False)
        batch_op.create_index('ix_audit_user_time', ['user_id', 'created_at'], unique=False)

    op.create_table('exchange_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('direction', sa.Enum('IN', 'OUT', 'ADJUSTMENT', name='exchange_direction', native_enum=False), nullable=False),
    sa.Column('unit_cost', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('is_priced', sa.Boolean(), server_default=sa.text('0'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('quantity > 0', name='chk_exchange_qty_positive'),
    sa.CheckConstraint('unit_cost >= 0', name='ck_exchange_unit_cost_non_negative'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('exchange_transactions', schema=None) as batch_op:
        batch_op.create_index('ix_exchange_prod_wh', ['product_id', 'warehouse_id'], unique=False)
        batch_op.create_index('ix_exchange_supplier', ['supplier_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_exchange_transactions_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_exchange_transactions_direction'), ['direction'], unique=False)
        batch_op.create_index(batch_op.f('ix_exchange_transactions_product_id'), ['product_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_exchange_transactions_supplier_id'), ['supplier_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_exchange_transactions_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_exchange_transactions_warehouse_id'), ['warehouse_id'], unique=False)

    op.create_table('import_runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('file_sha256', sa.String(length=64), nullable=True),
    sa.Column('dry_run', sa.Boolean(), nullable=False),
    sa.Column('inserted', sa.Integer(), nullable=False),
    sa.Column('updated', sa.Integer(), nullable=False),
    sa.Column('skipped', sa.Integer(), nullable=False),
    sa.Column('errors', sa.Integer(), nullable=False),
    sa.Column('duration_ms', sa.Integer(), nullable=False),
    sa.Column('report_path', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.String(length=255), nullable=True),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('import_runs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_import_runs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_import_runs_dry_run'), ['dry_run'], unique=False)
        batch_op.create_index(batch_op.f('ix_import_runs_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_import_runs_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_import_runs_warehouse_id'), ['warehouse_id'], unique=False)
        batch_op.create_index('ix_import_runs_wh_dryrun_dt', ['warehouse_id', 'dry_run', 'created_at'], unique=False)

    op.create_table('notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('entity_type', sa.String(length=50), nullable=True),
    sa.Column('entity_id', sa.String(length=50), nullable=True),
    sa.Column('is_pinned', sa.Boolean(), server_default=sa.text('0'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='note_priority', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_notes_author_id'), ['author_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_notes_created_at'), ['created_at'], unique=False)
        batch_op.create_index('ix_notes_entity', ['entity_type', 'entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_notes_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index('ix_notes_entity_pinned_created', ['entity_type', 'entity_id', 'is_pinned', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_notes_entity_type'), ['entity_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_notes_is_pinned'), ['is_pinned'], unique=False)
        batch_op.create_index(batch_op.f('ix_notes_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_notes_updated_at'), ['updated_at'], unique=False)

    op.create_table('online_cart_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cart_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('price >= 0', name='chk_cart_item_price_non_negative'),
    sa.CheckConstraint('quantity > 0', name='chk_cart_item_qty_positive'),
    sa.ForeignKeyConstraint(['cart_id'], ['online_carts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cart_id', 'product_id', name='uq_cart_item_cart_product')
    )
    with op.batch_alter_table('online_cart_items', schema=None) as batch_op:
        batch_op.create_index('ix_cart_item_cart_product', ['cart_id', 'product_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_cart_items_added_at'), ['added_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_cart_items_cart_id'), ['cart_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_cart_items_product_id'), ['product_id'], unique=False)

    op.create_table('online_preorders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_number', sa.String(length=50), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('cart_id', sa.Integer(), nullable=True),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('prepaid_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('expected_fulfillment', sa.DateTime(), nullable=True),
    sa.Column('actual_fulfillment', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'FULFILLED', 'CANCELLED', name='online_preorder_status', native_enum=False), nullable=False),
    sa.Column('payment_status', sa.Enum('PENDING', 'PARTIAL', 'PAID', name='online_preorder_payment_status', native_enum=False), nullable=False),
    sa.Column('payment_method', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('shipping_address', sa.Text(), nullable=True),
    sa.Column('billing_address', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('prepaid_amount >= 0', name='chk_online_prepaid_non_negative'),
    sa.CheckConstraint('total_amount  >= 0', name='chk_online_total_non_negative'),
    sa.ForeignKeyConstraint(['cart_id'], ['online_carts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('online_preorders', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_online_preorders_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorders_customer_id'), ['customer_id'], unique=False)
        batch_op.create_index('ix_online_preorders_customer_status', ['customer_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorders_order_number'), ['order_number'], unique=True)
        batch_op.create_index(batch_op.f('ix_online_preorders_payment_status'), ['payment_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorders_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorders_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorders_warehouse_id'), ['warehouse_id'], unique=False)

    op.create_table('partner_settlement_lines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('settlement_id', sa.Integer(), nullable=False),
    sa.Column('source_type', sa.String(length=30), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Numeric(precision=12, scale=3), nullable=True),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('gross_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('share_percent', sa.Numeric(precision=6, scale=3), nullable=True),
    sa.Column('share_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('gross_amount >= 0', name='ck_psl_gross_amount_non_negative'),
    sa.CheckConstraint('quantity >= 0', name='ck_psl_quantity_non_negative'),
    sa.CheckConstraint('share_amount >= 0', name='ck_psl_share_amount_non_negative'),
    sa.CheckConstraint('share_percent >= 0 AND share_percent <= 100', name='ck_psl_share_percent_range'),
    sa.CheckConstraint('unit_price >= 0', name='ck_psl_unit_price_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['settlement_id'], ['partner_settlements.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('partner_settlement_lines', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_partner_settlement_lines_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_settlement_lines_settlement_id'), ['settlement_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_settlement_lines_source_id'), ['source_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_partner_settlement_lines_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index('ix_psl_source', ['source_type', 'source_id'], unique=False)

    op.create_table('preorders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('reference', sa.String(length=50), nullable=True),
    sa.Column('preorder_date', sa.DateTime(), nullable=True),
    sa.Column('expected_date', sa.DateTime(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('prepaid_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'FULFILLED', 'CANCELLED', name='preorder_status', native_enum=False), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('payment_method', sa.Enum('cash', 'bank', 'card', 'cheque', 'online', name='preorder_payment_method', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('prepaid_amount >= 0', name='chk_preorder_prepaid_non_negative'),
    sa.CheckConstraint('quantity > 0', name='chk_preorder_quantity_positive'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='chk_preorder_tax_rate'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reference')
    )
    with op.batch_alter_table('preorders', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_preorders_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_preorders_updated_at'), ['updated_at'], unique=False)

    op.create_table('product_partners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('partner_id', sa.Integer(), nullable=False),
    sa.Column('share_percent', sa.Float(), nullable=False),
    sa.Column('share_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.CheckConstraint('share_amount >= 0', name='ck_product_partner_share_amount_non_negative'),
    sa.CheckConstraint('share_percent >= 0 AND share_percent <= 100', name='chk_partner_share'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('product_partners', schema=None) as batch_op:
        batch_op.create_index('ix_product_partner_pair', ['product_id', 'partner_id'], unique=False)

    op.create_table('product_supplier_loans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=False),
    sa.Column('loan_value', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('deferred_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('is_settled', sa.Boolean(), nullable=True),
    sa.Column('partner_share_quantity', sa.Integer(), nullable=True),
    sa.Column('partner_share_value', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('deferred_price IS NULL OR deferred_price >= 0', name='chk_deferred_price_non_negative'),
    sa.CheckConstraint('loan_value >= 0', name='chk_loan_value_non_negative'),
    sa.CheckConstraint('partner_share_quantity >= 0', name='chk_partner_share_qty_non_negative'),
    sa.CheckConstraint('partner_share_value >= 0', name='chk_partner_share_val_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('product_supplier_loans', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_product_supplier_loans_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_supplier_loans_is_settled'), ['is_settled'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_supplier_loans_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index('ix_psl_product_supplier', ['product_id', 'supplier_id'], unique=False)
        batch_op.create_index('ix_psl_supplier_is_settled', ['supplier_id', 'is_settled'], unique=False)

    op.create_table('service_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_number', sa.String(length=50), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('mechanic_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_type_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'DIAGNOSIS', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'ON_HOLD', name='service_status', native_enum=False), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='service_priority', native_enum=False), nullable=False),
    sa.Column('vehicle_vrn', sa.String(length=50), nullable=True),
    sa.Column('vehicle_model', sa.String(length=100), nullable=True),
    sa.Column('chassis_number', sa.String(length=100), nullable=True),
    sa.Column('engineer_notes', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('actual_duration', sa.Integer(), nullable=True),
    sa.Column('estimated_cost', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_cost', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('start_time', sa.Date(), nullable=True),
    sa.Column('end_time', sa.Date(), nullable=True),
    sa.Column('problem_description', sa.Text(), nullable=True),
    sa.Column('diagnosis', sa.Text(), nullable=True),
    sa.Column('resolution', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('received_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('expected_delivery', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('discount_total', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('parts_total', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('labor_total', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('consume_stock', sa.Boolean(), nullable=False),
    sa.Column('warranty_days', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('actual_duration >= 0', name='ck_srv_actual_duration_non_negative'),
    sa.CheckConstraint('discount_total >= 0', name='ck_srv_disc_ge_0'),
    sa.CheckConstraint('estimated_duration >= 0', name='ck_srv_estimated_duration_non_negative'),
    sa.CheckConstraint('labor_total >= 0', name='ck_srv_labor_ge_0'),
    sa.CheckConstraint('parts_total >= 0', name='ck_srv_parts_ge_0'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='ck_srv_tax_0_100'),
    sa.CheckConstraint('total_amount >= 0', name='ck_srv_total_ge_0'),
    sa.CheckConstraint('total_cost >= 0', name='ck_srv_totalcost_ge_0'),
    sa.CheckConstraint('warranty_days >= 0', name='ck_srv_warranty_days_non_negative'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['mechanic_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['vehicle_type_id'], ['equipment_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('service_requests', schema=None) as batch_op:
        batch_op.create_index('ix_service_customer_status', ['customer_id', 'status'], unique=False)
        batch_op.create_index('ix_service_mechanic_status', ['mechanic_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_customer_id'), ['customer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_mechanic_id'), ['mechanic_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_received_at'), ['received_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_service_number'), ['service_number'], unique=True)
        batch_op.create_index(batch_op.f('ix_service_requests_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_requests_vehicle_type_id'), ['vehicle_type_id'], unique=False)

    op.create_table('stock_adjustments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('reason', sa.String(length=20), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('total_cost', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("reason IN ('DAMAGED','STORE_USE')", name='ck_stock_adjustment_reason_allowed'),
    sa.CheckConstraint('total_cost >= 0', name='ck_stock_adjustment_total_cost_non_negative'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('stock_adjustments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_stock_adjustments_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_adjustments_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_adjustments_reason'), ['reason'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_adjustments_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_adjustments_warehouse_id'), ['warehouse_id'], unique=False)

    op.create_table('stock_levels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('reserved_quantity', sa.Integer(), nullable=False),
    sa.Column('min_stock', sa.Integer(), nullable=True),
    sa.Column('max_stock', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('(max_stock IS NULL OR max_stock >= 0)', name='ck_max_non_negative'),
    sa.CheckConstraint('(min_stock IS NULL OR max_stock IS NULL OR max_stock >= min_stock)', name='ck_max_ge_min'),
    sa.CheckConstraint('(min_stock IS NULL OR min_stock >= 0)', name='ck_min_non_negative'),
    sa.CheckConstraint('(quantity - reserved_quantity) >= 0', name='ck_stock_reserved_leq_qty'),
    sa.CheckConstraint('quantity >= 0', name='ck_stock_non_negative'),
    sa.CheckConstraint('reserved_quantity >= 0', name='ck_reserved_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('product_id', 'warehouse_id', name='uq_stock_product_wh')
    )
    with op.batch_alter_table('stock_levels', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_stock_levels_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_levels_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index('ix_stock_product_wh', ['product_id', 'warehouse_id'], unique=False)

    op.create_table('supplier_settlement_lines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('settlement_id', sa.Integer(), nullable=False),
    sa.Column('source_type', sa.String(length=30), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Numeric(precision=12, scale=3), nullable=True),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('gross_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('needs_pricing', sa.Boolean(), nullable=False),
    sa.Column('cost_source', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('gross_amount >= 0', name='ck_ssl_gross_amount_non_negative'),
    sa.CheckConstraint('quantity >= 0', name='ck_ssl_quantity_non_negative'),
    sa.CheckConstraint('unit_price >= 0', name='ck_ssl_unit_price_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['settlement_id'], ['supplier_settlements.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('supplier_settlement_lines', schema=None) as batch_op:
        batch_op.create_index('ix_ssl_source', ['source_type', 'source_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlement_lines_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlement_lines_needs_pricing'), ['needs_pricing'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlement_lines_settlement_id'), ['settlement_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlement_lines_source_id'), ['source_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_settlement_lines_updated_at'), ['updated_at'], unique=False)

    op.create_table('transfers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('reference', sa.String(length=50), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('destination_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('direction', sa.Enum('IN', 'OUT', 'ADJUSTMENT', name='transfer_direction', native_enum=False), nullable=False),
    sa.Column('transfer_date', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('quantity > 0', name='chk_transfer_qty_positive'),
    sa.CheckConstraint('source_id <> destination_id', name='chk_transfer_diff_wh'),
    sa.ForeignKeyConstraint(['destination_id'], ['warehouses.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['warehouses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reference')
    )
    with op.batch_alter_table('transfers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_transfers_created_at'), ['created_at'], unique=False)
        batch_op.create_index('ix_transfers_transfer_date', ['transfer_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_transfers_updated_at'), ['updated_at'], unique=False)

    op.create_table('user_permissions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_table('warehouse_partner_shares',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('partner_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('share_percentage', sa.Float(), nullable=False),
    sa.Column('share_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('share_amount >= 0', name='ck_wps_share_amount_non_negative'),
    sa.CheckConstraint('share_percentage >= 0 AND share_percentage <= 100', name='ck_wps_share_percentage_range'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('partner_id', 'warehouse_id', 'product_id', name='uq_wps_partner_wh_prod')
    )
    with op.batch_alter_table('warehouse_partner_shares', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_warehouse_partner_shares_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_warehouse_partner_shares_partner_id'), ['partner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_warehouse_partner_shares_product_id'), ['product_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_warehouse_partner_shares_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_warehouse_partner_shares_warehouse_id'), ['warehouse_id'], unique=False)
        batch_op.create_index('ix_wps_partner_wh_prod', ['partner_id', 'warehouse_id', 'product_id'], unique=False)

    op.create_table('online_payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_ref', sa.String(length=100), nullable=True),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('method', sa.String(length=50), nullable=True),
    sa.Column('gateway', sa.String(length=50), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', 'REFUNDED', name='online_payment_status', native_enum=False), nullable=False),
    sa.Column('transaction_data', sa.JSON(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('card_last4', sa.String(length=4), nullable=True),
    sa.Column('card_encrypted', sa.LargeBinary(), nullable=True),
    sa.Column('card_expiry', sa.String(length=5), nullable=True),
    sa.Column('cardholder_name', sa.String(length=128), nullable=True),
    sa.Column('card_brand', sa.String(length=20), nullable=True),
    sa.Column('card_fingerprint', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('amount > 0', name='chk_online_payment_amount_positive'),
    sa.ForeignKeyConstraint(['order_id'], ['online_preorders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('online_payments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_online_payments_card_fingerprint'), ['card_fingerprint'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_payments_card_last4'), ['card_last4'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_payments_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_payments_order_id'), ['order_id'], unique=False)
        batch_op.create_index('ix_online_payments_order_status', ['order_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_payments_payment_ref'), ['payment_ref'], unique=True)
        batch_op.create_index(batch_op.f('ix_online_payments_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_payments_updated_at'), ['updated_at'], unique=False)

    op.create_table('online_preorder_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.CheckConstraint('price >= 0', name='chk_online_item_price_non_negative'),
    sa.CheckConstraint('quantity > 0', name='chk_online_item_qty_positive'),
    sa.ForeignKeyConstraint(['order_id'], ['online_preorders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_id', 'product_id', name='uq_online_item_order_product')
    )
    with op.batch_alter_table('online_preorder_items', schema=None) as batch_op:
        batch_op.create_index('ix_online_item_order_product', ['order_id', 'product_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorder_items_order_id'), ['order_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_online_preorder_items_product_id'), ['product_id'], unique=False)

    op.create_table('sales',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sale_number', sa.String(length=50), nullable=True),
    sa.Column('sale_date', sa.DateTime(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('seller_id', sa.Integer(), nullable=False),
    sa.Column('preorder_id', sa.Integer(), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('discount_total', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'CONFIRMED', 'CANCELLED', 'REFUNDED', name='sale_status', native_enum=False), nullable=False),
    sa.Column('payment_status', sa.Enum('PENDING', 'PARTIAL', 'PAID', 'REFUNDED', name='sale_payment_progress', native_enum=False), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('shipping_address', sa.Text(), nullable=True),
    sa.Column('billing_address', sa.Text(), nullable=True),
    sa.Column('shipping_cost', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_paid', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('balance_due', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('balance_due >= 0', name='ck_sale_balance_due_non_negative'),
    sa.CheckConstraint('discount_total >= 0', name='ck_sale_discount_non_negative'),
    sa.CheckConstraint('shipping_cost >= 0', name='ck_sale_shipping_cost_non_negative'),
    sa.CheckConstraint('total_amount >= 0', name='ck_sale_total_amount_non_negative'),
    sa.CheckConstraint('total_paid >= 0', name='ck_sale_total_paid_non_negative'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['preorder_id'], ['preorders.id'], ),
    sa.ForeignKeyConstraint(['seller_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sale_number')
    )
    with op.batch_alter_table('sales', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sales_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_sales_updated_at'), ['updated_at'], unique=False)

    op.create_table('service_parts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('part_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('discount', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('note', sa.String(length=200), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('share_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('discount >= 0 AND discount <= 100', name='chk_service_part_discount_range'),
    sa.CheckConstraint('quantity > 0', name='chk_service_part_qty_positive'),
    sa.CheckConstraint('share_percentage >= 0 AND share_percentage <= 100', name='chk_service_part_share_range'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='chk_service_part_tax_range'),
    sa.CheckConstraint('unit_price >= 0', name='chk_service_part_price_non_negative'),
    sa.ForeignKeyConstraint(['part_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('service_id', 'part_id', 'warehouse_id', name='uq_service_part_unique')
    )
    with op.batch_alter_table('service_parts', schema=None) as batch_op:
        batch_op.create_index('ix_service_part_pair', ['service_id', 'part_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_parts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_parts_part_id'), ['part_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_parts_partner_id'), ['partner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_parts_service_id'), ['service_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_parts_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_parts_warehouse_id'), ['warehouse_id'], unique=False)

    op.create_table('service_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('share_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('discount', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('note', sa.String(length=200), nullable=True),
    sa.CheckConstraint('discount >= 0 AND discount <= 100', name='chk_service_task_discount_range'),
    sa.CheckConstraint('quantity > 0', name='chk_service_task_qty_positive'),
    sa.CheckConstraint('share_percentage >= 0 AND share_percentage <= 100', name='chk_service_task_share_range'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='chk_service_task_tax_range'),
    sa.CheckConstraint('unit_price >= 0', name='chk_service_task_price_non_negative'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('service_tasks', schema=None) as batch_op:
        batch_op.create_index('ix_service_task_service', ['service_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_service_tasks_service_id'), ['service_id'], unique=False)

    op.create_table('stock_adjustment_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('adjustment_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_cost', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('notes', sa.String(length=200), nullable=True),
    sa.CheckConstraint('quantity > 0', name='ck_stock_adjustment_item_qty_positive'),
    sa.CheckConstraint('unit_cost >= 0', name='ck_stock_adjustment_item_cost_non_negative'),
    sa.ForeignKeyConstraint(['adjustment_id'], ['stock_adjustments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('stock_adjustment_items', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_stock_adjustment_items_adjustment_id'), ['adjustment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_adjustment_items_product_id'), ['product_id'], unique=False)

    op.create_table('supplier_loan_settlements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('loan_id', sa.Integer(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('settled_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('settlement_date', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('settled_price >= 0', name='chk_settlement_price_non_negative'),
    sa.ForeignKeyConstraint(['loan_id'], ['product_supplier_loans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('supplier_loan_settlements', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_supplier_loan_settlements_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_loan_settlements_loan_id'), ['loan_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_loan_settlements_supplier_id'), ['supplier_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_supplier_loan_settlements_updated_at'), ['updated_at'], unique=False)

    op.create_table('invoices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invoice_number', sa.String(length=50), nullable=True),
    sa.Column('invoice_date', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('sale_id', sa.Integer(), nullable=True),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.Column('preorder_id', sa.Integer(), nullable=True),
    sa.Column('source', sa.Enum('MANUAL', 'SALE', 'SERVICE', 'PREORDER', 'SUPPLIER', 'PARTNER', 'ONLINE', name='invoice_source', native_enum=False), nullable=False),
    sa.Column('status', sa.Enum('UNPAID', 'PARTIAL', 'PAID', 'CANCELLED', 'REFUNDED', name='invoice_status', native_enum=False), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('tax_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('discount_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('terms', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('discount_amount >= 0', name='ck_invoice_discount_amount_non_negative'),
    sa.CheckConstraint('tax_amount >= 0', name='ck_invoice_tax_amount_non_negative'),
    sa.CheckConstraint('total_amount >= 0', name='ck_invoice_total_amount_non_negative'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['preorder_id'], ['preorders.id'], ),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service_requests.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('invoice_number')
    )
    with op.batch_alter_table('invoices', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_invoices_created_at'), ['created_at'], unique=False)
        batch_op.create_index('ix_invoices_customer_status', ['customer_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_invoices_updated_at'), ['updated_at'], unique=False)

    op.create_table('sale_lines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sale_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('discount_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('note', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('discount_rate >= 0 AND discount_rate <= 100', name='chk_sale_line_discount_rate_range'),
    sa.CheckConstraint('quantity > 0', name='chk_sale_line_qty_positive'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='chk_sale_line_tax_rate_range'),
    sa.CheckConstraint('unit_price >= 0', name='chk_sale_line_unit_price_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sale_lines', schema=None) as batch_op:
        batch_op.create_index('ix_sale_line_sale', ['sale_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_sale_lines_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_sale_lines_updated_at'), ['updated_at'], unique=False)

    op.create_table('shipments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sa.String(length=50), nullable=True),
    sa.Column('shipment_number', sa.String(length=50), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('shipment_date', sa.DateTime(), nullable=True),
    sa.Column('expected_arrival', sa.DateTime(), nullable=True),
    sa.Column('actual_arrival', sa.DateTime(), nullable=True),
    sa.Column('origin', sa.String(length=100), nullable=True),
    sa.Column('destination', sa.String(length=100), nullable=True),
    sa.Column('destination_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('value_before', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('shipping_cost', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('customs', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('vat', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('insurance', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('carrier', sa.String(length=100), nullable=True),
    sa.Column('tracking_number', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('sale_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("status IN ('DRAFT','IN_TRANSIT','ARRIVED','CANCELLED','CREATED')", name='chk_shipment_status_allowed'),
    sa.CheckConstraint('customs >= 0', name='ck_shipment_customs_non_negative'),
    sa.CheckConstraint('insurance >= 0', name='ck_shipment_insurance_non_negative'),
    sa.CheckConstraint('shipping_cost >= 0', name='ck_shipment_shipping_cost_non_negative'),
    sa.CheckConstraint('value_before >= 0', name='ck_shipment_value_before_non_negative'),
    sa.CheckConstraint('vat >= 0', name='ck_shipment_vat_non_negative'),
    sa.ForeignKeyConstraint(['destination_id'], ['warehouses.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('shipments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_shipments_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_date'), ['date'], unique=False)
        batch_op.create_index('ix_shipments_dest_status', ['destination_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_destination_id'), ['destination_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_number'), ['number'], unique=True)
        batch_op.create_index(batch_op.f('ix_shipments_sale_id'), ['sale_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_shipment_date'), ['shipment_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_shipment_number'), ['shipment_number'], unique=True)
        batch_op.create_index(batch_op.f('ix_shipments_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_tracking_number'), ['tracking_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipments_updated_at'), ['updated_at'], unique=False)

    op.create_table('expenses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=True),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('shipment_id', sa.Integer(), nullable=True),
    sa.Column('utility_account_id', sa.Integer(), nullable=True),
    sa.Column('stock_adjustment_id', sa.Integer(), nullable=True),
    sa.Column('payee_type', sa.String(length=20), nullable=False),
    sa.Column('payee_entity_id', sa.Integer(), nullable=True),
    sa.Column('payee_name', sa.String(length=200), nullable=True),
    sa.Column('beneficiary_name', sa.String(length=200), nullable=True),
    sa.Column('paid_to', sa.String(length=200), nullable=True),
    sa.Column('period_start', sa.Date(), nullable=True),
    sa.Column('period_end', sa.Date(), nullable=True),
    sa.Column('payment_method', sa.String(length=20), nullable=False),
    sa.Column('payment_details', sa.Text(), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('tax_invoice_number', sa.String(length=100), nullable=True),
    sa.Column('check_number', sa.String(length=100), nullable=True),
    sa.Column('check_bank', sa.String(length=100), nullable=True),
    sa.Column('check_due_date', sa.Date(), nullable=True),
    sa.Column('bank_transfer_ref', sa.String(length=100), nullable=True),
    sa.Column('card_number', sa.String(length=8), nullable=True),
    sa.Column('card_holder', sa.String(length=120), nullable=True),
    sa.Column('card_expiry', sa.String(length=10), nullable=True),
    sa.Column('online_gateway', sa.String(length=50), nullable=True),
    sa.Column('online_ref', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("payee_type IN ('EMPLOYEE','SUPPLIER','UTILITY','OTHER')", name='ck_expense_payee_type_allowed'),
    sa.CheckConstraint("payment_method IN ('cash','cheque','bank','card','online','other')", name='chk_expense_payment_method_allowed'),
    sa.CheckConstraint('amount >= 0', name='chk_expense_amount_non_negative'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['stock_adjustment_id'], ['stock_adjustments.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['type_id'], ['expense_types.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['utility_account_id'], ['utility_accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stock_adjustment_id', name='uq_expenses_stock_adjustment_id')
    )
    with op.batch_alter_table('expenses', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_expenses_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_employee_id'), ['employee_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_paid_to'), ['paid_to'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_partner_id'), ['partner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_payee_entity_id'), ['payee_entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_payee_name'), ['payee_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_payee_type'), ['payee_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_period_end'), ['period_end'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_period_start'), ['period_start'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_shipment_id'), ['shipment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_stock_adjustment_id'), ['stock_adjustment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_tax_invoice_number'), ['tax_invoice_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_type_id'), ['type_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_updated_at'), ['updated_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_utility_account_id'), ['utility_account_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_expenses_warehouse_id'), ['warehouse_id'], unique=False)

    op.create_table('invoice_lines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('discount', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('discount >= 0 AND discount <= 100', name='ck_invoice_line_discount_range'),
    sa.CheckConstraint('quantity >= 0', name='ck_invoice_line_quantity_non_negative'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='ck_invoice_line_tax_rate_range'),
    sa.CheckConstraint('unit_price >= 0', name='ck_invoice_line_unit_price_non_negative'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('invoice_lines', schema=None) as batch_op:
        batch_op.create_index('ix_invoice_lines_invoice', ['invoice_id'], unique=False)

    op.create_table('shipment_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shipment_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_cost', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('declared_value', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('landed_extra_share', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('landed_unit_cost', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.String(length=200), nullable=True),
    sa.CheckConstraint('declared_value >= 0', name='ck_shipment_item_declared_value_non_negative'),
    sa.CheckConstraint('landed_extra_share >= 0', name='ck_shipment_item_landed_extra_share_non_negative'),
    sa.CheckConstraint('landed_unit_cost >= 0', name='ck_shipment_item_landed_unit_cost_non_negative'),
    sa.CheckConstraint('quantity > 0', name='chk_shipment_item_qty_positive'),
    sa.CheckConstraint('unit_cost >= 0', name='ck_shipment_item_unit_cost_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shipment_id', 'product_id', 'warehouse_id', name='uq_shipment_item_unique')
    )
    with op.batch_alter_table('shipment_items', schema=None) as batch_op:
        batch_op.create_index('ix_shipment_items_prod_wh', ['product_id', 'warehouse_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_items_product_id'), ['product_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_items_shipment_id'), ['shipment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_items_warehouse_id'), ['warehouse_id'], unique=False)

    op.create_table('shipment_partners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shipment_id', sa.Integer(), nullable=False),
    sa.Column('partner_id', sa.Integer(), nullable=False),
    sa.Column('identity_number', sa.String(length=100), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('address', sa.String(length=200), nullable=True),
    sa.Column('unit_price_before_tax', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('expiry_date', sa.Date(), nullable=True),
    sa.Column('share_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('share_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('share_amount >= 0', name='ck_shipment_partner_share_amount_non_negative'),
    sa.CheckConstraint('share_percentage >= 0 AND share_percentage <= 100', name='chk_shipment_partner_share'),
    sa.CheckConstraint('unit_price_before_tax >= 0', name='ck_shipment_partner_unit_price_non_negative'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shipment_id', 'partner_id', name='uq_shipment_partner_unique')
    )
    with op.batch_alter_table('shipment_partners', schema=None) as batch_op:
        batch_op.create_index('ix_shipment_partner_pair', ['shipment_id', 'partner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_partners_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_partners_partner_id'), ['partner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_partners_shipment_id'), ['shipment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_shipment_partners_updated_at'), ['updated_at'], unique=False)

    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_number', sa.String(length=50), nullable=False),
    sa.Column('payment_date', sa.DateTime(), nullable=False),
    sa.Column('subtotal', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('tax_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('method', sa.Enum('cash', 'bank', 'card', 'cheque', 'online', name='payment_method', native_enum=False), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', name='payment_status', native_enum=False), nullable=False),
    sa.Column('direction', sa.Enum('IN', 'OUT', name='payment_direction', native_enum=False), nullable=False),
    sa.Column('entity_type', sa.Enum('CUSTOMER', 'SUPPLIER', 'PARTNER', 'SHIPMENT', 'EXPENSE', 'LOAN', 'SALE', 'INVOICE', 'PREORDER', 'SERVICE', name='payment_entity_type', native_enum=False), nullable=False),
    sa.Column('reference', sa.String(length=100), nullable=True),
    sa.Column('receipt_number', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('check_number', sa.String(length=100), nullable=True),
    sa.Column('check_bank', sa.String(length=100), nullable=True),
    sa.Column('check_due_date', sa.DateTime(), nullable=True),
    sa.Column('card_holder', sa.String(length=100), nullable=True),
    sa.Column('card_expiry', sa.String(length=10), nullable=True),
    sa.Column('card_last4', sa.String(length=4), nullable=True),
    sa.Column('bank_transfer_ref', sa.String(length=100), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('shipment_id', sa.Integer(), nullable=True),
    sa.Column('expense_id', sa.Integer(), nullable=True),
    sa.Column('loan_settlement_id', sa.Integer(), nullable=True),
    sa.Column('sale_id', sa.Integer(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.Column('preorder_id', sa.Integer(), nullable=True),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('(\n            (CASE WHEN customer_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN supplier_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN partner_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN shipment_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN expense_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN loan_settlement_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN sale_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN invoice_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN preorder_id IS NOT NULL THEN 1 ELSE 0 END) +\n            (CASE WHEN service_id IS NOT NULL THEN 1 ELSE 0 END)\n        ) = 1', name='ck_payment_one_target'),
    sa.CheckConstraint('subtotal >= 0', name='ck_payment_subtotal_non_negative'),
    sa.CheckConstraint('tax_amount >= 0', name='ck_payment_tax_amount_non_negative'),
    sa.CheckConstraint('tax_rate >= 0 AND tax_rate <= 100', name='ck_payment_tax_rate_range'),
    sa.CheckConstraint('total_amount > 0', name='ck_payment_total_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['expense_id'], ['expenses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['loan_settlement_id'], ['supplier_loan_settlements.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['preorder_id'], ['preorders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('payment_number'),
    sa.UniqueConstraint('receipt_number')
    )
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.create_index('ix_pay_inv_status_dir', ['invoice_id', 'status', 'direction'], unique=False)
        batch_op.create_index('ix_pay_partner_status_dir', ['partner_id', 'status', 'direction'], unique=False)
        batch_op.create_index('ix_pay_preorder_status_dir', ['preorder_id', 'status', 'direction'], unique=False)
        batch_op.create_index('ix_pay_sale_status_dir', ['sale_id', 'status', 'direction'], unique=False)
        batch_op.create_index('ix_pay_supplier_status_dir', ['supplier_id', 'status', 'direction'], unique=False)

    op.create_table('payment_splits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('method', sa.Enum('cash', 'bank', 'card', 'cheque', 'online', name='split_payment_method', native_enum=False), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('details', sa.JSON(), nullable=False),
    sa.CheckConstraint('amount > 0', name='chk_split_amount_positive'),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('payment_splits', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_payment_splits_method'), ['method'], unique=False)
        batch_op.create_index(batch_op.f('ix_payment_splits_payment_id'), ['payment_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('payment_splits', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payment_splits_payment_id'))
        batch_op.drop_index(batch_op.f('ix_payment_splits_method'))

    op.drop_table('payment_splits')
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_index('ix_pay_supplier_status_dir')
        batch_op.drop_index('ix_pay_sale_status_dir')
        batch_op.drop_index('ix_pay_preorder_status_dir')
        batch_op.drop_index('ix_pay_partner_status_dir')
        batch_op.drop_index('ix_pay_inv_status_dir')

    op.drop_table('payments')
    with op.batch_alter_table('shipment_partners', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_shipment_partners_updated_at'))
        batch_op.drop_index(batch_op.f('ix_shipment_partners_shipment_id'))
        batch_op.drop_index(batch_op.f('ix_shipment_partners_partner_id'))
        batch_op.drop_index(batch_op.f('ix_shipment_partners_created_at'))
        batch_op.drop_index('ix_shipment_partner_pair')

    op.drop_table('shipment_partners')
    with op.batch_alter_table('shipment_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_shipment_items_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_shipment_items_shipment_id'))
        batch_op.drop_index(batch_op.f('ix_shipment_items_product_id'))
        batch_op.drop_index('ix_shipment_items_prod_wh')

    op.drop_table('shipment_items')
    with op.batch_alter_table('invoice_lines', schema=None) as batch_op:
        batch_op.drop_index('ix_invoice_lines_invoice')

    op.drop_table('invoice_lines')
    with op.batch_alter_table('expenses', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_expenses_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_utility_account_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_updated_at'))
        batch_op.drop_index(batch_op.f('ix_expenses_type_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_tax_invoice_number'))
        batch_op.drop_index(batch_op.f('ix_expenses_stock_adjustment_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_shipment_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_period_start'))
        batch_op.drop_index(batch_op.f('ix_expenses_period_end'))
        batch_op.drop_index(batch_op.f('ix_expenses_payee_type'))
        batch_op.drop_index(batch_op.f('ix_expenses_payee_name'))
        batch_op.drop_index(batch_op.f('ix_expenses_payee_entity_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_partner_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_paid_to'))
        batch_op.drop_index(batch_op.f('ix_expenses_employee_id'))
        batch_op.drop_index(batch_op.f('ix_expenses_date'))
        batch_op.drop_index(batch_op.f('ix_expenses_created_at'))

    op.drop_table('expenses')
    with op.batch_alter_table('shipments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_shipments_updated_at'))
        batch_op.drop_index(batch_op.f('ix_shipments_tracking_number'))
        batch_op.drop_index(batch_op.f('ix_shipments_status'))
        batch_op.drop_index(batch_op.f('ix_shipments_shipment_number'))
        batch_op.drop_index(batch_op.f('ix_shipments_shipment_date'))
        batch_op.drop_index(batch_op.f('ix_shipments_sale_id'))
        batch_op.drop_index(batch_op.f('ix_shipments_number'))
        batch_op.drop_index(batch_op.f('ix_shipments_destination_id'))
        batch_op.drop_index('ix_shipments_dest_status')
        batch_op.drop_index(batch_op.f('ix_shipments_date'))
        batch_op.drop_index(batch_op.f('ix_shipments_created_at'))

    op.drop_table('shipments')
    with op.batch_alter_table('sale_lines', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sale_lines_updated_at'))
        batch_op.drop_index(batch_op.f('ix_sale_lines_created_at'))
        batch_op.drop_index('ix_sale_line_sale')

    op.drop_table('sale_lines')
    with op.batch_alter_table('invoices', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_invoices_updated_at'))
        batch_op.drop_index('ix_invoices_customer_status')
        batch_op.drop_index(batch_op.f('ix_invoices_created_at'))

    op.drop_table('invoices')
    with op.batch_alter_table('supplier_loan_settlements', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_supplier_loan_settlements_updated_at'))
        batch_op.drop_index(batch_op.f('ix_supplier_loan_settlements_supplier_id'))
        batch_op.drop_index(batch_op.f('ix_supplier_loan_settlements_loan_id'))
        batch_op.drop_index(batch_op.f('ix_supplier_loan_settlements_created_at'))

    op.drop_table('supplier_loan_settlements')
    with op.batch_alter_table('stock_adjustment_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_stock_adjustment_items_product_id'))
        batch_op.drop_index(batch_op.f('ix_stock_adjustment_items_adjustment_id'))

    op.drop_table('stock_adjustment_items')
    with op.batch_alter_table('service_tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_service_tasks_service_id'))
        batch_op.drop_index('ix_service_task_service')

    op.drop_table('service_tasks')
    with op.batch_alter_table('service_parts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_service_parts_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_service_parts_updated_at'))
        batch_op.drop_index(batch_op.f('ix_service_parts_service_id'))
        batch_op.drop_index(batch_op.f('ix_service_parts_partner_id'))
        batch_op.drop_index(batch_op.f('ix_service_parts_part_id'))
        batch_op.drop_index(batch_op.f('ix_service_parts_created_at'))
        batch_op.drop_index('ix_service_part_pair')

    op.drop_table('service_parts')
    with op.batch_alter_table('sales', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sales_updated_at'))
        batch_op.drop_index(batch_op.f('ix_sales_created_at'))

    op.drop_table('sales')
    with op.batch_alter_table('online_preorder_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_online_preorder_items_product_id'))
        batch_op.drop_index(batch_op.f('ix_online_preorder_items_order_id'))
        batch_op.drop_index('ix_online_item_order_product')

    op.drop_table('online_preorder_items')
    with op.batch_alter_table('online_payments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_online_payments_updated_at'))
        batch_op.drop_index(batch_op.f('ix_online_payments_status'))
        batch_op.drop_index(batch_op.f('ix_online_payments_payment_ref'))
        batch_op.drop_index('ix_online_payments_order_status')
        batch_op.drop_index(batch_op.f('ix_online_payments_order_id'))
        batch_op.drop_index(batch_op.f('ix_online_payments_created_at'))
        batch_op.drop_index(batch_op.f('ix_online_payments_card_last4'))
        batch_op.drop_index(batch_op.f('ix_online_payments_card_fingerprint'))

    op.drop_table('online_payments')
    with op.batch_alter_table('warehouse_partner_shares', schema=None) as batch_op:
        batch_op.drop_index('ix_wps_partner_wh_prod')
        batch_op.drop_index(batch_op.f('ix_warehouse_partner_shares_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_warehouse_partner_shares_updated_at'))
        batch_op.drop_index(batch_op.f('ix_warehouse_partner_shares_product_id'))
        batch_op.drop_index(batch_op.f('ix_warehouse_partner_shares_partner_id'))
        batch_op.drop_index(batch_op.f('ix_warehouse_partner_shares_created_at'))

    op.drop_table('warehouse_partner_shares')
    op.drop_table('user_permissions')
    with op.batch_alter_table('transfers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_transfers_updated_at'))
        batch_op.drop_index('ix_transfers_transfer_date')
        batch_op.drop_index(batch_op.f('ix_transfers_created_at'))

    op.drop_table('transfers')
    with op.batch_alter_table('supplier_settlement_lines', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_supplier_settlement_lines_updated_at'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlement_lines_source_id'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlement_lines_settlement_id'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlement_lines_needs_pricing'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlement_lines_created_at'))
        batch_op.drop_index('ix_ssl_source')

    op.drop_table('supplier_settlement_lines')
    with op.batch_alter_table('stock_levels', schema=None) as batch_op:
        batch_op.drop_index('ix_stock_product_wh')
        batch_op.drop_index(batch_op.f('ix_stock_levels_updated_at'))
        batch_op.drop_index(batch_op.f('ix_stock_levels_created_at'))

    op.drop_table('stock_levels')
    with op.batch_alter_table('stock_adjustments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_stock_adjustments_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_stock_adjustments_updated_at'))
        batch_op.drop_index(batch_op.f('ix_stock_adjustments_reason'))
        batch_op.drop_index(batch_op.f('ix_stock_adjustments_date'))
        batch_op.drop_index(batch_op.f('ix_stock_adjustments_created_at'))

    op.drop_table('stock_adjustments')
    with op.batch_alter_table('service_requests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_service_requests_vehicle_type_id'))
        batch_op.drop_index(batch_op.f('ix_service_requests_updated_at'))
        batch_op.drop_index(batch_op.f('ix_service_requests_status'))
        batch_op.drop_index(batch_op.f('ix_service_requests_service_number'))
        batch_op.drop_index(batch_op.f('ix_service_requests_received_at'))
        batch_op.drop_index(batch_op.f('ix_service_requests_priority'))
        batch_op.drop_index(batch_op.f('ix_service_requests_mechanic_id'))
        batch_op.drop_index(batch_op.f('ix_service_requests_customer_id'))
        batch_op.drop_index(batch_op.f('ix_service_requests_created_at'))
        batch_op.drop_index('ix_service_mechanic_status')
        batch_op.drop_index('ix_service_customer_status')

    op.drop_table('service_requests')
    with op.batch_alter_table('product_supplier_loans', schema=None) as batch_op:
        batch_op.drop_index('ix_psl_supplier_is_settled')
        batch_op.drop_index('ix_psl_product_supplier')
        batch_op.drop_index(batch_op.f('ix_product_supplier_loans_updated_at'))
        batch_op.drop_index(batch_op.f('ix_product_supplier_loans_is_settled'))
        batch_op.drop_index(batch_op.f('ix_product_supplier_loans_created_at'))

    op.drop_table('product_supplier_loans')
    with op.batch_alter_table('product_partners', schema=None) as batch_op:
        batch_op.drop_index('ix_product_partner_pair')

    op.drop_table('product_partners')
    with op.batch_alter_table('preorders', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_preorders_updated_at'))
        batch_op.drop_index(batch_op.f('ix_preorders_created_at'))

    op.drop_table('preorders')
    with op.batch_alter_table('partner_settlement_lines', schema=None) as batch_op:
        batch_op.drop_index('ix_psl_source')
        batch_op.drop_index(batch_op.f('ix_partner_settlement_lines_updated_at'))
        batch_op.drop_index(batch_op.f('ix_partner_settlement_lines_source_id'))
        batch_op.drop_index(batch_op.f('ix_partner_settlement_lines_settlement_id'))
        batch_op.drop_index(batch_op.f('ix_partner_settlement_lines_created_at'))

    op.drop_table('partner_settlement_lines')
    with op.batch_alter_table('online_preorders', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_online_preorders_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_online_preorders_updated_at'))
        batch_op.drop_index(batch_op.f('ix_online_preorders_status'))
        batch_op.drop_index(batch_op.f('ix_online_preorders_payment_status'))
        batch_op.drop_index(batch_op.f('ix_online_preorders_order_number'))
        batch_op.drop_index('ix_online_preorders_customer_status')
        batch_op.drop_index(batch_op.f('ix_online_preorders_customer_id'))
        batch_op.drop_index(batch_op.f('ix_online_preorders_created_at'))

    op.drop_table('online_preorders')
    with op.batch_alter_table('online_cart_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_online_cart_items_product_id'))
        batch_op.drop_index(batch_op.f('ix_online_cart_items_cart_id'))
        batch_op.drop_index(batch_op.f('ix_online_cart_items_added_at'))
        batch_op.drop_index('ix_cart_item_cart_product')

    op.drop_table('online_cart_items')
    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_notes_updated_at'))
        batch_op.drop_index(batch_op.f('ix_notes_priority'))
        batch_op.drop_index(batch_op.f('ix_notes_is_pinned'))
        batch_op.drop_index(batch_op.f('ix_notes_entity_type'))
        batch_op.drop_index('ix_notes_entity_pinned_created')
        batch_op.drop_index(batch_op.f('ix_notes_entity_id'))
        batch_op.drop_index('ix_notes_entity')
        batch_op.drop_index(batch_op.f('ix_notes_created_at'))
        batch_op.drop_index(batch_op.f('ix_notes_author_id'))

    op.drop_table('notes')
    with op.batch_alter_table('import_runs', schema=None) as batch_op:
        batch_op.drop_index('ix_import_runs_wh_dryrun_dt')
        batch_op.drop_index(batch_op.f('ix_import_runs_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_import_runs_user_id'))
        batch_op.drop_index(batch_op.f('ix_import_runs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_import_runs_dry_run'))
        batch_op.drop_index(batch_op.f('ix_import_runs_created_at'))

    op.drop_table('import_runs')
    with op.batch_alter_table('exchange_transactions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_exchange_transactions_warehouse_id'))
        batch_op.drop_index(batch_op.f('ix_exchange_transactions_updated_at'))
        batch_op.drop_index(batch_op.f('ix_exchange_transactions_supplier_id'))
        batch_op.drop_index(batch_op.f('ix_exchange_transactions_product_id'))
        batch_op.drop_index(batch_op.f('ix_exchange_transactions_direction'))
        batch_op.drop_index(batch_op.f('ix_exchange_transactions_created_at'))
        batch_op.drop_index('ix_exchange_supplier')
        batch_op.drop_index('ix_exchange_prod_wh')

    op.drop_table('exchange_transactions')
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index('ix_audit_user_time')
        batch_op.drop_index('ix_audit_model_record')
        batch_op.drop_index(batch_op.f('ix_audit_logs_user_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_record_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_model_name'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_customer_id'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_created_at'))
        batch_op.drop_index(batch_op.f('ix_audit_logs_action'))

    op.drop_table('audit_logs')
    with op.batch_alter_table('warehouses', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_warehouses_updated_at'))
        batch_op.drop_index('ix_warehouses_online_default')
        batch_op.drop_index('ix_warehouses_name')
        batch_op.drop_index(batch_op.f('ix_warehouses_created_at'))
        batch_op.drop_index('ix_warehouses_active_type')

    op.drop_table('warehouses')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_updated_at'))
        batch_op.drop_index(batch_op.f('ix_users_role_id'))
        batch_op.drop_index('ix_users_role_active')
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index(batch_op.f('ix_users_created_at'))

    op.drop_table('users')
    with op.batch_alter_table('supplier_settlements', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_supplier_settlements_updated_at'))
        batch_op.drop_index('ix_supplier_settlements_supplier_period')
        batch_op.drop_index(batch_op.f('ix_supplier_settlements_supplier_id'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlements_mode'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlements_created_at'))
        batch_op.drop_index(batch_op.f('ix_supplier_settlements_code'))

    op.drop_table('supplier_settlements')
    op.drop_table('role_permissions')
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_index('uq_products_barcode', postgresql_where=sa.text('barcode IS NOT NULL'))
        batch_op.drop_index(batch_op.f('ix_products_updated_at'))
        batch_op.drop_index(batch_op.f('ix_products_part_number'))
        batch_op.drop_index(batch_op.f('ix_products_name'))
        batch_op.drop_index(batch_op.f('ix_products_created_at'))
        batch_op.drop_index('ix_products_brand_part')
        batch_op.drop_index(batch_op.f('ix_products_brand'))

    op.drop_table('products')
    with op.batch_alter_table('partner_settlements', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partner_settlements_updated_at'))
        batch_op.drop_index('ix_partner_settlements_partner_period')
        batch_op.drop_index(batch_op.f('ix_partner_settlements_partner_id'))
        batch_op.drop_index(batch_op.f('ix_partner_settlements_created_at'))
        batch_op.drop_index(batch_op.f('ix_partner_settlements_code'))

    op.drop_table('partner_settlements')
    with op.batch_alter_table('online_carts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_online_carts_updated_at'))
        batch_op.drop_index(batch_op.f('ix_online_carts_status'))
        batch_op.drop_index(batch_op.f('ix_online_carts_session_id'))
        batch_op.drop_index(batch_op.f('ix_online_carts_expires_at'))
        batch_op.drop_index(batch_op.f('ix_online_carts_customer_id'))
        batch_op.drop_index(batch_op.f('ix_online_carts_created_at'))
        batch_op.drop_index(batch_op.f('ix_online_carts_cart_id'))
        batch_op.drop_index('ix_online_cart_customer_status')

    op.drop_table('online_carts')
    with op.batch_alter_table('gl_entries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_gl_entries_updated_at'))
        batch_op.drop_index(batch_op.f('ix_gl_entries_created_at'))
        batch_op.drop_index(batch_op.f('ix_gl_entries_batch_id'))
        batch_op.drop_index('ix_gl_entries_account_currency')
        batch_op.drop_index(batch_op.f('ix_gl_entries_account'))

    op.drop_table('gl_entries')
    with op.batch_alter_table('utility_accounts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_utility_accounts_utility_type'))
        batch_op.drop_index(batch_op.f('ix_utility_accounts_updated_at'))
        batch_op.drop_index(batch_op.f('ix_utility_accounts_meter_no'))
        batch_op.drop_index(batch_op.f('ix_utility_accounts_created_at'))
        batch_op.drop_index(batch_op.f('ix_utility_accounts_alias'))
        batch_op.drop_index(batch_op.f('ix_utility_accounts_account_no'))

    op.drop_table('utility_accounts')
    with op.batch_alter_table('suppliers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_suppliers_updated_at'))
        batch_op.drop_index(batch_op.f('ix_suppliers_phone'))
        batch_op.drop_index('ix_suppliers_name')
        batch_op.drop_index(batch_op.f('ix_suppliers_email'))
        batch_op.drop_index(batch_op.f('ix_suppliers_created_at'))

    op.drop_table('suppliers')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))
        batch_op.drop_index('ix_roles_default_name')

    op.drop_table('roles')
    with op.batch_alter_table('product_categories', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_product_categories_updated_at'))
        batch_op.drop_index(batch_op.f('ix_product_categories_created_at'))

    op.drop_table('product_categories')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permissions_name'))
        batch_op.drop_index('ix_permissions_module_code')
        batch_op.drop_index(batch_op.f('ix_permissions_module'))
        batch_op.drop_index(batch_op.f('ix_permissions_code'))

    op.drop_table('permissions')
    with op.batch_alter_table('partners', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_partners_updated_at'))
        batch_op.drop_index('ix_partners_name')
        batch_op.drop_index(batch_op.f('ix_partners_email'))
        batch_op.drop_index(batch_op.f('ix_partners_created_at'))

    op.drop_table('partners')
    with op.batch_alter_table('gl_batches', schema=None) as batch_op:
        batch_op.drop_index('ix_gl_entity')
        batch_op.drop_index(batch_op.f('ix_gl_batches_updated_at'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_status'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_source_type'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_source_id'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_purpose'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_posted_at'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_entity_type'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_entity_id'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_created_at'))
        batch_op.drop_index(batch_op.f('ix_gl_batches_code'))

    op.drop_table('gl_batches')
    with op.batch_alter_table('expense_types', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_expense_types_updated_at'))
        batch_op.drop_index(batch_op.f('ix_expense_types_name'))
        batch_op.drop_index(batch_op.f('ix_expense_types_created_at'))

    op.drop_table('expense_types')
    with op.batch_alter_table('equipment_types', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_equipment_types_updated_at'))
        batch_op.drop_index(batch_op.f('ix_equipment_types_created_at'))

    op.drop_table('equipment_types')
    with op.batch_alter_table('employees', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_employees_updated_at'))
        batch_op.drop_index('ix_employees_name')
        batch_op.drop_index(batch_op.f('ix_employees_email'))
        batch_op.drop_index(batch_op.f('ix_employees_created_at'))

    op.drop_table('employees')
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.drop_index('ix_customers_whatsapp')
        batch_op.drop_index(batch_op.f('ix_customers_updated_at'))
        batch_op.drop_index('ix_customers_name')
        batch_op.drop_index(batch_op.f('ix_customers_created_at'))
        batch_op.drop_index('ix_customers_active_online')

    op.drop_table('customers')
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_accounts_updated_at'))
        batch_op.drop_index(batch_op.f('ix_accounts_created_at'))
        batch_op.drop_index(batch_op.f('ix_accounts_code'))

    op.drop_table('accounts')
    # ### end Alembic commands ###
