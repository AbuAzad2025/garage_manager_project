"""
AI Predictive Analytics - ุชุญูููุงุช ุชูุจุคูุฉ
ุงูุชูุจุค ุจุงููุทุน ุงููุทููุจุฉ ูุงูุฃุนุทุงู ุงููุชูุฑุฑุฉ
"""

from datetime import datetime, timezone, timedelta
from collections import Counter
from typing import List, Dict, Any
from extensions import db
from sqlalchemy import func, desc


def predict_needed_parts(days_back: int = 90) -> Dict[str, Any]:
    """ุงูุชูุจุค ุจุงููุทุน ุงููุทููุจุฉ ุจูุงุกู ุนูู ุงูุฃุนุทุงู ุงููุชูุฑุฑุฉ"""
    from models import ServiceRequest, ServicePart, Product
    
    # ุฌูุน ุงููุทุน ุงููุณุชุฎุฏูุฉ ูู ุงููุชุฑุฉ ุงูุฃุฎูุฑุฉ
    start_date = datetime.now(timezone.utc) - timedelta(days=days_back)
    
    parts_usage = db.session.query(
        Product.name,
        Product.id,
        func.count(ServicePart.id).label('usage_count'),
        func.sum(ServicePart.quantity).label('total_quantity')
    ).join(ServicePart, ServicePart.part_id == Product.id
    ).join(ServiceRequest, ServiceRequest.id == ServicePart.service_id
    ).filter(
        ServiceRequest.received_at >= start_date
    ).group_by(Product.id).order_by(desc('usage_count')).all()
    
    if not parts_usage:
        return {
            'success': False,
            'message': 'ูุง ุชูุฌุฏ ุจูุงูุงุช ูุงููุฉ ููุชูุจุค'
        }
    
    # ุงูุชุญููู ุงูุชูุจุคู
    predictions = []
    
    for product_name, product_id, usage_count, total_quantity in parts_usage[:10]:
        # ุญุณุงุจ ุงููุนุฏู ุงูุดูุฑู
        monthly_rate = (total_quantity or 0) / (days_back / 30)
        
        # ุงูุชูุจุค ููุดูุฑ ุงููุงุฏู
        predicted_next_month = int(monthly_rate * 1.2)  # + 20% buffer
        
        # ูุญุต ุงููุฎุฒูู ุงูุญุงูู
        from models import StockLevel
        stock = db.session.query(StockLevel).filter_by(product_id=product_id).first()
        current_stock = stock.quantity if stock else 0
        
        # ุชุญุฏูุฏ ุงูุญุงุฌุฉ
        need_to_order = max(0, predicted_next_month - current_stock)
        
        priority = 'ุนุงููุฉ' if need_to_order > monthly_rate else 'ูุชูุณุทุฉ'
        if current_stock < monthly_rate:
            priority = 'ุนุงุฌูุฉ!'
        
        predictions.append({
            'part_name': product_name,
            'usage_count': usage_count,
            'total_used': total_quantity,
            'monthly_rate': round(monthly_rate, 1),
            'predicted_next_month': predicted_next_month,
            'current_stock': current_stock,
            'need_to_order': need_to_order,
            'priority': priority
        })
    
    return {
        'success': True,
        'period': f'{days_back} ููู',
        'predictions': predictions,
        'top_5': predictions[:5]
    }


def analyze_recurring_failures(days_back: int = 180) -> Dict[str, Any]:
    """ุชุญููู ุงูุฃุนุทุงู ุงููุชูุฑุฑุฉ - ููุชูุจุค ุงููุณุชูุจูู"""
    from models import ServiceRequest
    
    start_date = datetime.now(timezone.utc) - timedelta(days=days_back)
    
    # ุฌูุน ุฃูุตุงู ุงููุดุงูู
    services = db.session.query(ServiceRequest).filter(
        ServiceRequest.received_at >= start_date
    ).all()
    
    if not services:
        return {'success': False, 'message': 'ูุง ุชูุฌุฏ ุจูุงูุงุช'}
    
    # ุชุญููู ุงููููุงุช ุงูููุชุงุญูุฉ
    keywords_counter = Counter()
    
    problem_categories = {
        'ูุญุฑู': 0,
        'ูุฑุงูู': 0,
        'ููุฑุจุงุก': 0,
        'ุชุนููู': 0,
        'ููุฏุฑูููู': 0,
        'ุฌูุฒูุฑ': 0
    }
    
    for service in services:
        desc = (service.description or '').lower()
        
        for category in problem_categories.keys():
            if category in desc:
                problem_categories[category] += 1
        
        # ุงุณุชุฎุฑุงุฌ ุงููููุงุช
        words = desc.split()
        keywords_counter.update([w for w in words if len(w) > 3])
    
    # ุฃูุซุฑ ุงููุดุงูู ุชูุฑุงุฑุงู
    top_categories = sorted(problem_categories.items(), key=lambda x: x[1], reverse=True)
    top_keywords = keywords_counter.most_common(10)
    
    response = f"""๐ **ุชุญููู ุงูุฃุนุทุงู ุงููุชูุฑุฑุฉ ({days_back} ููู):**

๐ง **ุฃูุซุฑ ูุฆุงุช ุงูุฃุนุทุงู:**
"""
    for category, count in top_categories[:5]:
        if count > 0:
            percentage = (count / len(services)) * 100
            response += f"  โข {category}: {count} ูุฑุฉ ({percentage:.1f}%)\n"
    
    response += "\n๐ **ุงููููุงุช ุงูุฃูุซุฑ ุชูุฑุงุฑุงู:**\n"
    for word, count in top_keywords[:5]:
        response += f"  โข \"{word}\": {count} ูุฑุฉ\n"
    
    # ุงูุชูุจุค ูุงูุชูุตูุฉ
    top_category = top_categories[0][0] if top_categories[0][1] > 0 else None
    
    if top_category:
        response += f"""
๐ก **ุงุณุชูุชุงุฌู:**
ุงููุดุงูู ุงูุฃูุซุฑ ูู ูู **{top_category}**

๐ฏ **ุชูุตูุชู ุงูุชูุจุคูุฉ:**
"""
        if top_category == 'ูุญุฑู':
            response += """  โข ุงุญุชูุธ ุจูุฎุฒูู ูู: ุจูุงุฌูุ ููุงุชุฑ ุฒูุชุ ููุงุชุฑ ููุงุก
  โข ุฑุงุฌุน ุฌูุฏุฉ ุงูุฒูุช ุงููุณุชุฎุฏู
  โข ูุฏูู ุจุงูุงุช ุตูุงูุฉ ุฏูุฑูุฉ ูููุญุฑู
"""
        elif top_category == 'ูุฑุงูู':
            response += """  โข ุงุญุชูุธ ุจูุฎุฒูู ูู: ูุญูุงุช ูุฑุงููุ ุฏูุณูุงุช
  โข ูุฏูู ูุญุต ูุฑุงูู ูุฌุงูู
  โข ุฐููุฑ ุงูุนููุงุก ุจุฃูููุฉ ูุญุต ุงููุฑุงูู ูู 6 ุฃุดูุฑ
"""
        elif top_category == 'ููุฏุฑูููู':
            response += """  โข ุงุญุชูุธ ุจุฒูุช ููุฏุฑููููุ ููุงุชุฑุ ุณููุงุช
  โข ูุญุต ุฏูุฑู ูููุธุงู ุงูููุฏุฑููููู
  โข ุชุฏุฑูุจ ุงูููููู ุนูู ุชุดุฎูุต ุงูููุฏุฑูููู
"""
    
    return response


def predict_maintenance_schedule(vehicle_id: int = None) -> str:
    """ุงูุชูุจุค ุจุฌุฏูู ุงูุตูุงูุฉ ุงููุทููุจ"""
    # ูุฐู ุฏุงูุฉ ูุซุงู - ูููู ุชุทููุฑูุง ุจูุงุกู ุนูู ุจูุงูุงุช ุงููุฑูุจุงุช
    
    return """๐ **ุฌุฏูู ุงูุตูุงูุฉ ุงููุชูุจุฃ ุจู:**

**ุตูุงูุฉ ุฏูุฑูุฉ ูู:**
โข 5,000 ูู: ุฒูุช + ููุชุฑ ุฒูุช
โข 10,000 ูู: + ููุชุฑ ููุงุก + ูุญุต ุงููุฑุงูู
โข 20,000 ูู: + ููุชุฑ ูููุฏ + ุดูุนุงุช
โข 40,000 ูู: + ููุชุฑ ูููู + ูุญุต ุดุงูู
โข 60,000 ูู: + ุณูุฑ ุชูููุช (ุญุณุจ ุงูุณูุงุฑุฉ)

๐ก **ุชูุตูุชู:** ุฃูุดุฆ ูุธุงู ุชุฐููุฑ ุชููุงุฆู ููุนููุงุก!
"""

