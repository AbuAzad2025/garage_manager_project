"""
๐ ุฏููู ุงููุธุงู ุงููุญุงุณุจู - Accounting System Documentation
==========================================================

๐ ุงููุตู:
    ุชูุซูู ุดุงูู ูููุธุงู ุงููุญุงุณุจู ูุงููุนุงููุฑ ุงููุณุชุฎุฏูุฉ
    
๐ ุงููุญุชููุงุช:
    โ ุฏููู ุงูุญุณุงุจุงุช ุงููุญุงุณุจูุฉ
    โ ูุนุงููุฑ ุงููููุฏ ุงููุญุงุณุจูุฉ
    โ ุณูุงุณุงุช ุงููุฑุงุฌุนุฉ ูุงููุญุต
    โ ุฅุฌุฑุงุกุงุช ุงูุฅุตูุงุญ ูุงูุชุตุญูุญ
    
๐ ุงูุฃูุงู:
    - Owner only (@owner_only)
"""

from flask import Blueprint, render_template, request, jsonify, current_app
from flask_login import login_required, current_user
from datetime import datetime, date
import json

from models import db, Account, GLBatch, GLEntry
from routes.security import owner_only

# ุฅูุดุงุก Blueprint
accounting_docs_bp = Blueprint('accounting_docs', __name__, url_prefix='/docs/accounting')

@accounting_docs_bp.route('/')
@owner_only
def index():
    """ุฏููู ุงููุธุงู ุงููุญุงุณุจู ุงูุฑุฆูุณู"""
    return render_template('docs/accounting/index.html')

@accounting_docs_bp.route('/chart-of-accounts')
@owner_only
def chart_of_accounts():
    """ุฏููู ุงูุญุณุงุจุงุช ุงููุญุงุณุจูุฉ"""
    try:
        # ุงูุญุตูู ุนูู ุฌููุน ุงูุญุณุงุจุงุช
        accounts = Account.query.order_by(Account.code).all()
        
        # ุชุตููู ุงูุญุณุงุจุงุช ุญุณุจ ุงูููุน
        accounts_by_type = {}
        for account in accounts:
            account_type = account.type
            if account_type not in accounts_by_type:
                accounts_by_type[account_type] = []
            
            accounts_by_type[account_type].append({
                'id': account.id,
                'code': account.code,
                'name': account.name,
                'is_active': account.is_active,
                'description': getattr(account, 'description', '')
            })
        
        # ุฅุญุตุงุฆูุงุช ุงูุญุณุงุจุงุช
        stats = {
            'total_accounts': len(accounts),
            'active_accounts': len([a for a in accounts if a.is_active]),
            'inactive_accounts': len([a for a in accounts if not a.is_active]),
            'by_type': {t: len(accs) for t, accs in accounts_by_type.items()}
        }
        
        return jsonify({
            'success': True,
            'document_type': 'chart_of_accounts',
            'stats': stats,
            'accounts_by_type': accounts_by_type,
            'account_structure': {
                '1xxx': 'ุงูุฃุตูู (Assets)',
                '2xxx': 'ุงูุฎุตูู (Liabilities)', 
                '3xxx': 'ุญููู ุงูููููุฉ (Equity)',
                '4xxx': 'ุงูุฅูุฑุงุฏุงุช (Revenue)',
                '5xxx': 'ุงููุตุฑููุงุช (Expenses)'
            }
        })
        
    except Exception as e:
        current_app.logger.error(f"ุฎุทุฃ ูู ุฏููู ุงูุญุณุงุจุงุช: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@accounting_docs_bp.route('/accounting-standards')
@owner_only
def accounting_standards():
    """ูุนุงููุฑ ุงููููุฏ ุงููุญุงุณุจูุฉ"""
    try:
        standards = {
            'double_entry_principle': {
                'title': 'ูุจุฏุฃ ุงูููุฏ ุงููุฒุฏูุฌ',
                'description': 'ูู ูุนุงููุฉ ูุญุงุณุจูุฉ ูุฌุจ ุฃู ุชุคุซุฑ ุนูู ุญุณุงุจูู ุนูู ุงูุฃููุ ุจุญูุซ ูููู ุฅุฌูุงูู ุงููุฏูู = ุฅุฌูุงูู ุงูุฏุงุฆู',
                'example': 'ุนูุฏ ุจูุน ุจูุจูุบ 1000 ุดููู:\n- ูุฏูู: ุญุณุงุจ ุงูุนููุงุก (AR) 1000\n- ุฏุงุฆู: ุญุณุงุจ ุงููุจูุนุงุช (Revenue) 1000'
            },
            'opening_balance_rules': {
                'title': 'ููุงุนุฏ ุงูุฑุตูุฏ ุงูุงูุชุชุงุญู',
                'customer_positive': 'ุฑุตูุฏ ููุฌุจ ููุนููู = ูู ุนูููุง โ ุฏุงุฆู AR + ูุฏูู Equity',
                'customer_negative': 'ุฑุตูุฏ ุณุงูุจ ููุนููู = ุนููู ููุง โ ูุฏูู AR + ุฏุงุฆู Equity',
                'supplier_positive': 'ุฑุตูุฏ ููุฌุจ ููููุฑุฏ = ูู ุนูููุง โ ุฏุงุฆู AP + ูุฏูู Equity',
                'supplier_negative': 'ุฑุตูุฏ ุณุงูุจ ููููุฑุฏ = ุนููู ููุง โ ูุฏูู AP + ุฏุงุฆู Equity'
            },
            'sale_accounting': {
                'title': 'ูุญุงุณุจุฉ ุงููุจูุนุงุช',
                'basic_entry': 'ูุฏูู: AR (ุญุณุงุจ ุงูุนููุงุก) โ ุฏุงุฆู: Revenue (ุงููุจูุนุงุช)',
                'with_partners': 'ุงููุจูุนุงุช ุชููุณู ุญุณุจ ูุณุจ ุงูุดุฑูุงุก ูู ุงูููุชุฌ',
                'with_exchange': 'ูุฏูู: COGS (ุชูููุฉ ุงูุจุถุงุนุฉ) + ุฏุงุฆู: AP (ุญุณุงุจ ุงูููุฑุฏูู)',
                'trigger': 'ุชูุณุฌู ุนูุฏ ุชุฃููุฏ ุงูุจูุน (status = CONFIRMED)'
            },
            'payment_accounting': {
                'title': 'ูุญุงุณุจุฉ ุงููุฏููุนุงุช',
                'incoming': 'ูุฏูู: Cash/Bank โ ุฏุงุฆู: AR (ููุนููุงุก) ุฃู AP (ููููุฑุฏูู)',
                'outgoing': 'ูุฏูู: AP (ููููุฑุฏูู) โ ุฏุงุฆู: Cash/Bank',
                'trigger': 'ุชูุณุฌู ุนูุฏ ุงูุชูุงู ุงูุฏูุน (status = COMPLETED)'
            },
            'expense_accounting': {
                'title': 'ูุญุงุณุจุฉ ุงููุตุฑููุงุช',
                'entry': 'ูุฏูู: Expenses (ุงููุตุฑููุงุช) โ ุฏุงุฆู: Cash/Bank (ุญุณุจ ุทุฑููุฉ ุงูุฏูุน)',
                'trigger': 'ุชูุณุฌู ุนูุฏ ุฅุฏุฎุงู ุงููุตุฑูู'
            },
            'check_accounting': {
                'title': 'ูุญุงุณุจุฉ ุงูุดููุงุช',
                'pending': 'ูุฏูู: Checks Under Collection โ ุฏุงุฆู: AR',
                'cashed': 'ูุฏูู: Cash/Bank โ ุฏุงุฆู: Checks Under Collection',
                'bounced': 'ูุฏูู: AR โ ุฏุงุฆู: Checks Under Collection'
            }
        }
        
        return jsonify({
            'success': True,
            'document_type': 'accounting_standards',
            'standards': standards
        })
        
    except Exception as e:
        current_app.logger.error(f"ุฎุทุฃ ูู ูุนุงููุฑ ุงููุญุงุณุจุฉ: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@accounting_docs_bp.route('/audit-policies')
@owner_only
def audit_policies():
    """ุณูุงุณุงุช ุงููุฑุงุฌุนุฉ ูุงููุญุต"""
    try:
        policies = {
            'daily_checks': {
                'title': 'ุงููุญูุตุงุช ุงูููููุฉ',
                'checks': [
                    'ูุญุต ุชูุงุฒู ุงููููุฏ ุงููุญุงุณุจูุฉ',
                    'ุงูุชุญูู ูู ุงููุฏููุนุงุช ุงููุนููุฉ',
                    'ูุญุต ุงูุดููุงุช ุงููุนููุฉ',
                    'ูุฑุงุฌุนุฉ ุงููุนุงููุงุช ุงูุฌุฏูุฏุฉ'
                ],
                'frequency': 'ููููุงู',
                'responsible': 'ุงููุญุงุณุจ ุงูุฑุฆูุณู'
            },
            'weekly_checks': {
                'title': 'ุงููุญูุตุงุช ุงูุฃุณุจูุนูุฉ',
                'checks': [
                    'ูุฑุงุฌุนุฉ ุฃุฑุตุฏุฉ ุงูุนููุงุก ูุงูููุฑุฏูู',
                    'ูุญุต ุงุชุณุงู ุงูุญุณุงุจุงุช',
                    'ูุฑุงุฌุนุฉ ุงููุนุงููุงุช ุบูุฑ ุงูููุชููุฉ',
                    'ูุญุต ุชูุงูู ุงูุจูุงูุงุช'
                ],
                'frequency': 'ุฃุณุจูุนูุงู',
                'responsible': 'ูุฏูุฑ ุงููุญุงุณุจุฉ'
            },
            'monthly_checks': {
                'title': 'ุงููุญูุตุงุช ุงูุดูุฑูุฉ',
                'checks': [
                    'ุฅุนุฏุงุฏ ุงูุชูุงุฑูุฑ ุงููุงููุฉ ุงูุดูุฑูุฉ',
                    'ูุฑุงุฌุนุฉ ุดุงููุฉ ูููุธุงู ุงููุญุงุณุจู',
                    'ูุญุต ุงูุฃุฑุตุฏุฉ ุงููุฌูุนุฉ',
                    'ูุฑุงุฌุนุฉ ุงูุณูุงุณุงุช ูุงูุฅุฌุฑุงุกุงุช'
                ],
                'frequency': 'ุดูุฑูุงู',
                'responsible': 'ุงููุงูู'
            },
            'quarterly_checks': {
                'title': 'ุงููุญูุตุงุช ุงูุฑุจุนูุฉ',
                'checks': [
                    'ูุฑุงุฌุนุฉ ุฎุงุฑุฌูุฉ ูููุธุงู',
                    'ูุญุต ุงูุงูุชุซุงู ูููุนุงููุฑ ุงููุญุงุณุจูุฉ',
                    'ูุฑุงุฌุนุฉ ุงูุณูุงุณุงุช ูุงูุชุญุฏูุซุงุช',
                    'ุชุฏุฑูุจ ุงูููุธููู ุนูู ุงูุชุญุฏูุซุงุช'
                ],
                'frequency': 'ุฑุจุนูุงู',
                'responsible': 'ูุฑุงุฌุน ุฎุงุฑุฌู'
            },
            'error_handling': {
                'title': 'ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก',
                'procedures': [
                    'ุชุณุฌูู ุฌููุน ุงูุฃุฎุทุงุก ุงูููุชุดูุฉ',
                    'ุชุญููู ุณุจุจ ุงูุฎุทุฃ',
                    'ุชุทุจูู ุงูุฅุตูุงุญ ุงูููุงุณุจ',
                    'ุชูุซูู ุงูุฅุฌุฑุงุกุงุช ุงููุชุฎุฐุฉ',
                    'ููุน ุชูุฑุงุฑ ุงูุฎุทุฃ'
                ]
            },
            'backup_policies': {
                'title': 'ุณูุงุณุงุช ุงููุณุฎ ุงูุงุญุชูุงุทู',
                'frequency': 'ููููุงู',
                'retention': '30 ููู ูููุณุฎ ุงูููููุฉุ 12 ุดูุฑ ูููุณุฎ ุงูุดูุฑูุฉ',
                'verification': 'ูุญุต ุณูุงูุฉ ุงููุณุฎ ุฃุณุจูุนูุงู'
            }
        }
        
        return jsonify({
            'success': True,
            'document_type': 'audit_policies',
            'policies': policies
        })
        
    except Exception as e:
        current_app.logger.error(f"ุฎุทุฃ ูู ุณูุงุณุงุช ุงููุฑุงุฌุนุฉ: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@accounting_docs_bp.route('/correction-procedures')
@owner_only
def correction_procedures():
    """ุฅุฌุฑุงุกุงุช ุงูุฅุตูุงุญ ูุงูุชุตุญูุญ"""
    try:
        procedures = {
            'unbalanced_entries': {
                'title': 'ุฅุตูุงุญ ุงููููุฏ ุบูุฑ ุงููุชูุงุฒูุฉ',
                'steps': [
                    'ุชุญุฏูุฏ ุงููููุฏ ุบูุฑ ุงููุชูุงุฒูุฉ',
                    'ุชุญููู ุณุจุจ ุนุฏู ุงูุชูุงุฒู',
                    'ุฅุถุงูุฉ ูููุฏ ุงูุชุตุญูุญ ุงูููุงุณุจุฉ',
                    'ุงูุชุญูู ูู ุงูุชูุงุฒู ูุฑุฉ ุฃุฎุฑู',
                    'ุชูุซูู ุงูุฅุตูุงุญ'
                ],
                'auto_fix': 'ูุชุงุญ ูููููุฏ ุงูุจุณูุทุฉ',
                'manual_fix': 'ูุทููุจ ูููููุฏ ุงููุนูุฏุฉ'
            },
            'missing_entries': {
                'title': 'ุฅุตูุงุญ ุงููููุฏ ุงูููููุฏุฉ',
                'steps': [
                    'ุชุญุฏูุฏ ุงููุนุงููุงุช ุจุฏูู ูููุฏ ูุญุงุณุจูุฉ',
                    'ุฅูุดุงุก ุงููููุฏ ุงููุญุงุณุจูุฉ ุงูููุงุณุจุฉ',
                    'ุงูุชุญูู ูู ุตุญุฉ ุงููููุฏ',
                    'ุชุฃููุฏ ุงููููุฏ',
                    'ุชูุซูู ุงูุฅุตูุงุญ'
                ]
            },
            'incorrect_entries': {
                'title': 'ุฅุตูุงุญ ุงููููุฏ ุงูุฎุงุทุฆุฉ',
                'steps': [
                    'ุฅูุบุงุก ุงูููุฏ ุงูุฎุงุทุฆ',
                    'ุฅูุดุงุก ููุฏ ุงูุชุตุญูุญ',
                    'ุฅูุดุงุก ุงูููุฏ ุงูุตุญูุญ',
                    'ุงูุชุญูู ูู ุงูุชูุงุฒู',
                    'ุชูุซูู ุงูุฅุตูุงุญ'
                ]
            },
            'account_issues': {
                'title': 'ุฅุตูุงุญ ูุดุงูู ุงูุญุณุงุจุงุช',
                'missing_accounts': 'ุฅูุดุงุก ุงูุญุณุงุจุงุช ุงูููููุฏุฉ',
                'inactive_accounts': 'ุชูุนูู ุงูุญุณุงุจุงุช ุงููุณุชุฎุฏูุฉ',
                'duplicate_accounts': 'ุฏูุฌ ุงูุญุณุงุจุงุช ุงูููุฑุฑุฉ'
            },
            'data_integrity': {
                'title': 'ุฅุตูุงุญ ูุดุงูู ุชูุงูู ุงูุจูุงูุงุช',
                'orphaned_records': 'ุญุฐู ุงูุณุฌูุงุช ุงููุชููุฉ',
                'inconsistent_data': 'ุชุตุญูุญ ุงูุจูุงูุงุช ุบูุฑ ุงููุชุณูุฉ',
                'missing_relationships': 'ุฅุตูุงุญ ุงูุนูุงูุงุช ุงูููููุฏุฉ'
            }
        }
        
        return jsonify({
            'success': True,
            'document_type': 'correction_procedures',
            'procedures': procedures
        })
        
    except Exception as e:
        current_app.logger.error(f"ุฎุทุฃ ูู ุฅุฌุฑุงุกุงุช ุงูุชุตุญูุญ: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@accounting_docs_bp.route('/gl-accounts-reference')
@owner_only
def gl_accounts_reference():
    """ูุฑุฌุน ุญุณุงุจุงุช ุฏูุชุฑ ุงูุฃุณุชุงุฐ"""
    try:
        # ุงูุญุตูู ุนูู ุญุณุงุจุงุช GL ุงููุณุชุฎุฏูุฉ
        gl_accounts = db.session.query(GLEntry.account).distinct().all()
        used_accounts = [acc.account for acc in gl_accounts]
        
        # ุงูุญุตูู ุนูู ุชูุงุตูู ุงูุญุณุงุจุงุช ุงููุณุชุฎุฏูุฉ
        accounts_details = db.session.query(Account).filter(
            Account.code.in_(used_accounts)
        ).all()
        
        # ุชุตููู ุงูุญุณุงุจุงุช
        accounts_by_category = {
            'assets': [],
            'liabilities': [],
            'equity': [],
            'revenue': [],
            'expenses': []
        }
        
        for account in accounts_details:
            category = account.type.lower()
            if category in accounts_by_category:
                accounts_by_category[category].append({
                    'code': account.code,
                    'name': account.name,
                    'is_active': account.is_active,
                    'usage_count': len([acc for acc in used_accounts if acc == account.code])
                })
        
        # ุญุณุงุจุงุช GL ุงูุฃุณุงุณูุฉ
        basic_gl_accounts = {
            'AR': '1100_AR - ุญุณุงุจ ุงูุนููุงุก (Accounts Receivable)',
            'AP': '2000_AP - ุญุณุงุจ ุงูููุฑุฏูู (Accounts Payable)',
            'REV': '4000_SALES - ุญุณุงุจ ุงููุจูุนุงุช (Revenue)',
            'CASH': '1000_CASH - ุงูููุฏูุฉ (Cash)',
            'BANK': '1010_BANK - ุงูุจูู (Bank)',
            'CARD': '1020_CARD_CLEARING - ุงูุจุทุงูุงุช (Card Clearing)',
            'VAT': '2100_VAT_PAYABLE - ุถุฑูุจุฉ ุงููููุฉ ุงููุถุงูุฉ (VAT Payable)',
            'EXP': '5000_EXPENSES - ุงููุตุฑููุงุช (Expenses)',
            'INV_EXCHANGE': '1205_INV_EXCHANGE - ูุฎุฒูู ุงูุชุจุงุฏู (Exchange Inventory)',
            'COGS_EXCHANGE': '5105_COGS_EXCHANGE - ุชูููุฉ ุงูุชุจุงุฏู (Exchange COGS)'
        }
        
        return jsonify({
            'success': True,
            'document_type': 'gl_accounts_reference',
            'accounts_by_category': accounts_by_category,
            'basic_gl_accounts': basic_gl_accounts,
            'total_used_accounts': len(used_accounts)
        })
        
    except Exception as e:
        current_app.logger.error(f"ุฎุทุฃ ูู ูุฑุฌุน ุญุณุงุจุงุช GL: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@accounting_docs_bp.route('/system-health-guide')
@owner_only
def system_health_guide():
    """ุฏููู ุตุญุฉ ุงููุธุงู ุงููุญุงุณุจู"""
    try:
        health_guide = {
            'indicators': {
                'green': {
                    'description': 'ุงููุธุงู ุณููู',
                    'conditions': [
                        'ุฌููุน ุงููููุฏ ูุชูุงุฒูุฉ',
                        'ูุง ุชูุฌุฏ ุญุณุงุจุงุช ููููุฏุฉ',
                        'ุงูุฃุฑุตุฏุฉ ูุชุณูุฉ',
                        'ูุง ุชูุฌุฏ ูุนุงููุงุช ุจุฏูู ูููุฏ'
                    ]
                },
                'yellow': {
                    'description': 'ุงููุธุงู ูุญุชุงุฌ ูุฑุงุฌุนุฉ',
                    'conditions': [
                        'ุจุนุถ ุงููููุฏ ุบูุฑ ูุชูุงุฒูุฉ',
                        'ุญุณุงุจุงุช ุบูุฑ ูุดุทุฉ',
                        'ูุฏููุนุงุช ูุนููุฉ',
                        'ุดููุงุช ูุนููุฉ'
                    ]
                },
                'red': {
                    'description': 'ุงููุธุงู ูุญุชุงุฌ ุฅุตูุงุญ ููุฑู',
                    'conditions': [
                        'ูููุฏ ุบูุฑ ูุชูุงุฒูุฉ ูุซูุฑุฉ',
                        'ุญุณุงุจุงุช ููููุฏุฉ',
                        'ุฃุฑุตุฏุฉ ุบูุฑ ูุชุณูุฉ',
                        'ูุนุงููุงุช ุจุฏูู ูููุฏ'
                    ]
                }
            },
            'maintenance_tasks': {
                'daily': [
                    'ูุญุต ุชูุงุฒู ุงููููุฏ',
                    'ูุฑุงุฌุนุฉ ุงููุฏููุนุงุช ุงููุนููุฉ',
                    'ูุญุต ุงูุดููุงุช ุงููุนููุฉ'
                ],
                'weekly': [
                    'ูุฑุงุฌุนุฉ ุฃุฑุตุฏุฉ ุงูููุงูุงุช',
                    'ูุญุต ุงุชุณุงู ุงูุญุณุงุจุงุช',
                    'ูุฑุงุฌุนุฉ ุงููุนุงููุงุช ุบูุฑ ุงูููุชููุฉ'
                ],
                'monthly': [
                    'ุฅุนุฏุงุฏ ุงูุชูุงุฑูุฑ ุงููุงููุฉ',
                    'ูุฑุงุฌุนุฉ ุดุงููุฉ ูููุธุงู',
                    'ูุญุต ุงูุฃุฑุตุฏุฉ ุงููุฌูุนุฉ'
                ]
            },
            'troubleshooting': {
                'unbalanced_entries': 'ุงุณุชุฎุฏุงู ุฃุฏุงุฉ ุฅุตูุงุญ ุงููููุฏ ุบูุฑ ุงููุชูุงุฒูุฉ',
                'missing_accounts': 'ุฅูุดุงุก ุงูุญุณุงุจุงุช ุงูููููุฏุฉ ูู ุฏููู ุงูุญุณุงุจุงุช',
                'inconsistent_balances': 'ูุฑุงุฌุนุฉ ููุทู ุญุณุงุจ ุงูุฃุฑุตุฏุฉ',
                'missing_gl_entries': 'ุฅูุดุงุก ุงููููุฏ ุงููุญุงุณุจูุฉ ูููุนุงููุงุช ุงูููููุฏุฉ'
            }
        }
        
        return jsonify({
            'success': True,
            'document_type': 'system_health_guide',
            'health_guide': health_guide
        })
        
    except Exception as e:
        current_app.logger.error(f"ุฎุทุฃ ูู ุฏููู ุตุญุฉ ุงููุธุงู: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
